//html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>To-Do List with History</title>
  <link rel="stylesheet" href="list.css">
  <script src="todo.js" defer></script>
</head>
<body>
  <div class="container">
    <h1>üìù To-Do List</h1>

    <!-- Task input section -->
    <div class="input-section">
      <input type="text" id="taskInput" placeholder="Enter a new task">
      <button id="addBtn">Add Task</button>
    </div>

    <!-- Active tasks -->
    <h2>Active Tasks</h2>
    <ul id="taskList"></ul>

    <!-- History section -->
    <h2>History</h2>
    <ul id="historyList"></ul>
  </div>
</body>
</html>

//css
body {
  font-family: "Segoe UI", Arial, sans-serif;
  background: linear-gradient(135deg, #74ebd5 0%, #9face6 100%);
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding: 40px;
  margin: 0;
}

.container {
  background: #fff;
  padding: 25px 35px;
  border-radius: 15px;
  box-shadow: 0px 6px 20px rgba(0,0,0,0.15);
  width: 450px;
}

h1 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

h2 {
  margin-top: 25px;
  margin-bottom: 10px;
  color: #444;
  font-size: 18px;
  border-bottom: 2px solid #eee;
  padding-bottom: 5px;
}

.input-section {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

#taskInput {
  flex: 1;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  padding: 10px 15px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  transition: 0.2s;
}

#addBtn {
  background: #28a745;
  color: #fff;
}
#addBtn:hover {
  background: #218838;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  background: #f9f9f9;
  margin: 8px 0;
  padding: 12px;
  border-radius: 8px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.task-text {
  flex-grow: 1;
}

.editBtn {
  background: orange;
  color: white;
  margin-left: 8px;
}
.editBtn:hover {
  background: darkorange;
}

.deleteBtn {
  background: red;
  color: white;
  margin-left: 8px;
}
.deleteBtn:hover {
  background: darkred;
}

.completeBtn {
  background: #007bff;
  color: white;
  margin-left: 8px;
}
.completeBtn:hover {
  background: #0056b3;
}

.completed {
  text-decoration: line-through;
  color: gray;
}

//javascript
const addBtn = document.getElementById("addBtn");
const taskInput = document.getElementById("taskInput");
const taskList = document.getElementById("taskList");
const historyList = document.getElementById("historyList");

let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
let history = JSON.parse(localStorage.getItem("history")) || [];

function saveData() {
  localStorage.setItem("tasks", JSON.stringify(tasks));
  localStorage.setItem("history", JSON.stringify(history));
}

function renderTasks() {
  taskList.innerHTML = "";
  tasks.forEach((task, index) => {
    const li = document.createElement("li");

    const span = document.createElement("span");
    span.textContent = task.text;
    span.className = "task-text";
    if (task.completed) span.classList.add("completed");

    const completeBtn = document.createElement("button");
    completeBtn.textContent = task.completed ? "Undo" : "Complete";
    completeBtn.className = "completeBtn";
    completeBtn.onclick = () => toggleComplete(index);

    const editBtn = document.createElement("button");
    editBtn.textContent = "Edit";
    editBtn.className = "editBtn";
    editBtn.onclick = () => editTask(index);

    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "Delete";
    deleteBtn.className = "deleteBtn";
    deleteBtn.onclick = () => deleteTask(index);

    li.appendChild(span);
    li.appendChild(completeBtn);
    li.appendChild(editBtn);
    li.appendChild(deleteBtn);

    taskList.appendChild(li);
  });
}

function renderHistory() {
  historyList.innerHTML = "";
  history.forEach(entry => {
    const li = document.createElement("li");
    li.textContent = `${entry.text} ‚Äî [${entry.action}] at ${entry.time}`;
    historyList.appendChild(li);
  });
}

function addTask() {
  const taskText = taskInput.value.trim();
  if (taskText === "") {
    alert("Please enter a task");
    return;
  }
  tasks.push({ text: taskText, completed: false });
  history.push({ text: taskText, action: "Added", time: new Date().toLocaleString() });
  saveData();
  renderTasks();
  renderHistory();
  taskInput.value = "";
}

function editTask(index) {
  const newTask = prompt("Edit task:", tasks[index].text);
  if (newTask !== null && newTask.trim() !== "") {
    history.push({ text: tasks[index].text, action: "Edited to '" + newTask.trim() + "'", time: new Date().toLocaleString() });
    tasks[index].text = newTask.trim();
    saveData();
    renderTasks();
    renderHistory();
  }
}

function deleteTask(index) {
  history.push({ text: tasks[index].text, action: "Deleted", time: new Date().toLocaleString() });
  tasks.splice(index, 1);
  saveData();
  renderTasks();
  renderHistory();
}

function toggleComplete(index) {
  tasks[index].completed = !tasks[index].completed;
  history.push({ text: tasks[index].text, action: tasks[index].completed ? "Marked Completed" : "Marked Incomplete", time: new Date().toLocaleString() });
  saveData();
  renderTasks();
  renderHistory();
}

addBtn.addEventListener("click", addTask);

renderTasks();
renderHistory();

